<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="4.0.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v4.0.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="type" val="output"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(130,130)" name="Clock">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(130,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="reset"/>
    </comp>
    <comp lib="0" loc="(130,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="x"/>
    </comp>
    <comp lib="0" loc="(480,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Q"/>
      <a name="type" val="output"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="5" loc="(440,140)" name="LED">
      <a name="label" val="z"/>
    </comp>
    <comp loc="(420,160)" name="seq_detector">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(130,130)" to="(160,130)"/>
    <wire from="(130,180)" to="(200,180)"/>
    <wire from="(130,230)" to="(160,230)"/>
    <wire from="(160,130)" to="(160,160)"/>
    <wire from="(160,160)" to="(200,160)"/>
    <wire from="(160,200)" to="(160,230)"/>
    <wire from="(160,200)" to="(200,200)"/>
    <wire from="(200,160)" to="(210,160)"/>
    <wire from="(200,180)" to="(210,180)"/>
    <wire from="(200,200)" to="(210,200)"/>
    <wire from="(420,160)" to="(430,160)"/>
    <wire from="(420,180)" to="(480,180)"/>
    <wire from="(430,140)" to="(430,160)"/>
    <wire from="(430,140)" to="(440,140)"/>
  </circuit>
  <vhdl name="seq_detector">library ieee;
use ieee.std_logic_1164.all;

-- Mealy sequence detector: pulses z on 001, 010, 110 (non-overlap).
-- Ports match your Logisim block: clk, reset, x, z, Q[2:0].
entity seq_detector is
  port (
    clk   : in  std_logic;
    reset : in  std_logic;                       -- synchronous, active high
    x     : in  std_logic;                       -- serial input bit
    z     : out std_logic;                       -- 1-cycle Mealy pulse
    Q     : out std_logic_vector(2 downto 0)     -- present state (for LEDs)
  );
end entity seq_detector;

architecture rtl of seq_detector is
  -- States (no DETECT state in Mealy)
  type state_t is (START, S0, S1, S00, S01, S10, S11);

  signal s, s_n : state_t := START;
begin

  -- State register (synchronous reset)

  process(clk)
  begin
    if rising_edge(clk) then
      if reset = '1' then
        s &lt;= START;
      else
        s &lt;= s_n;
      end if;
    end if;
  end process;
  -- Next-state &amp; Mealy output (combinational)
  -- Non-overlap: after detection we return to START.

  process(s, x)
  begin
    z   &lt;= '0';          -- default
    s_n &lt;= s;            -- default hold

    case s is
      when START =&gt;
        if x = '0' then s_n &lt;= S0;  else s_n &lt;= S1;  end if;

      when S0 =&gt;
        if x = '0' then s_n &lt;= S00; else s_n &lt;= S01; end if;

      when S1 =&gt;
        if x = '0' then s_n &lt;= S10; else s_n &lt;= S11; end if;

      -- detect 001 (we were in "00" and got '1')
      when S00 =&gt;
        if x = '1' then
          z   &lt;= '1';
          s_n &lt;= START;                   -- non-overlap restart
        else
          s_n &lt;= S00;
        end if;

      -- detect 010 (we were in "01" and got '0')
      when S01 =&gt;
        if x = '0' then
          z   &lt;= '1';
          s_n &lt;= START;                   -- non-overlap restart
        else
          s_n &lt;= S11;                     -- suffix 11 kept
        end if;

      when S10 =&gt;
        if x = '0' then s_n &lt;= S00; else s_n &lt;= S01; end if;

      -- detect 110 (we were in "11" and got '0')
      when S11 =&gt;
        if x = '0' then
          z   &lt;= '1';
          s_n &lt;= START;                   -- non-overlap restart
        else
          s_n &lt;= S11;
        end if;
    end case;
  end process;

  
  -- Present-state code to 3 LEDs 

  with s select
    Q &lt;= "000" when START,
         "001" when S0,
         "010" when S1,
         "011" when S00,
         "100" when S01,
         "101" when S10,
         "110" when S11,
         "111" when others;   -- unused in this Mealy design
end architecture rtl;</vhdl>
  <vhdl name="tb">library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity seq_detector_tb is
end;

architecture bench of seq_detector_tb is

  component seq_detector
    port (
      clk   : in  std_logic;
      reset : in  std_logic;            -- synchronous, active high
      x     : in  std_logic;            -- serial input bit
      z     : out std_logic;            -- Mealy pulse (combinational)
      Q     : out std_logic_vector(2 downto 0)
    );
  end component;

  signal clk  : std_logic := '0';
  signal reset: std_logic := '0';
  signal x    : std_logic := '0';
  signal z    : std_logic;
  signal Q    : std_logic_vector(2 downto 0);

  constant clock_period : time := 10 ns;      -- adjust if you like
  signal stop_the_clock : boolean := false;

begin
  -- UUT
  uut: seq_detector
    port map (
      clk   =&gt; clk,
      reset =&gt; reset,
      x     =&gt; x,
      z     =&gt; z,
      Q     =&gt; Q
    );

  -- CLOCK ----------------------------------------------------------
  clocking: process
  begin
    while not stop_the_clock loop
      clk &lt;= '0';
      wait for clock_period/2;
      clk &lt;= '1';
      wait for clock_period/2;
    end loop;
    wait;
  end process;

  -- STIMULUS --------------------------------
  stimulus: process
    function sl_to_str(s : std_logic) return string is
    begin
      if s = '0' then return "0";
      elsif s = '1' then return "1";
      else return "?";
      end if;
    end function;

    -- Drive the next bit on the **falling edge**, sample z mid-cycle,
    -- then advance the FSM on the next **rising edge**.
    procedure step_bit_mealy(b : std_logic; expect_z : std_logic; msg : string) is
    begin
      -- drive away from active edge
      wait until falling_edge(clk);
      x &lt;= b;

      -- sample mid-cycle before state updates
      wait for clock_period/4;  -- 1/4 period after falling edge (safe)
      assert z = expect_z
        report msg &amp; "  (z=" &amp; sl_to_str(z) &amp;
               ", expect=" &amp; sl_to_str(expect_z) &amp; ")"
        severity error;

      -- now clock the FSM to next state
      wait until rising_edge(clk);
      wait for 1 ns; -- small settle for viewing
    end procedure;

  begin
    -- Sync reset high for 1 rising edge
    reset &lt;= '1';
    wait until rising_edge(clk);
    reset &lt;= '0';

    -- spacer cycle
    wait until rising_edge(clk);
    wait for 1 ns;

    -- T1: 001 -&gt; expect z = 0,0,1  (pulse on the '1')
    step_bit_mealy('0','0',"T1 001 bit1");
    step_bit_mealy('0','0',"T1 001 bit2");
    step_bit_mealy('1','1',"T1 001 bit3");

    -- spacer
    wait until rising_edge(clk); wait for 1 ns;

    -- T2: 010 -&gt; expect z = 0,0,1  (pulse on the final '0')
    step_bit_mealy('0','0',"T2 010 bit1");
    step_bit_mealy('1','0',"T2 010 bit2");
    step_bit_mealy('0','1',"T2 010 bit3");

    -- spacer
    wait until rising_edge(clk); wait for 1 ns;

    -- T3: 110 -&gt; expect z = 0,0,1  (pulse on the final '0')
    step_bit_mealy('1','0',"T3 110 bit1");
    step_bit_mealy('1','0',"T3 110 bit2");
    step_bit_mealy('0','1',"T3 110 bit3");

    -- spacer
    wait until rising_edge(clk); wait for 1 ns;

    -- T4: non-overlap check: 0010 -&gt; 0,0,1,0
    step_bit_mealy('0','0',"T4 0010 bit1");
    step_bit_mealy('0','0',"T4 0010 bit2");
    step_bit_mealy('1','1',"T4 0010 bit3");
    step_bit_mealy('0','0',"T4 0010 bit4");

    -- spacer
    wait until rising_edge(clk); wait for 1 ns;

    -- T5: noise: 10000 -&gt; 0,0,0,0,0
    step_bit_mealy('1','0',"T5 10000 bit1");
    step_bit_mealy('0','0',"T5 10000 bit2");
    step_bit_mealy('0','0',"T5 10000 bit3");
    step_bit_mealy('0','0',"T5 10000 bit4");
    step_bit_mealy('0','0',"T5 10000 bit5");

    report "All tests executed." severity note;

    stop_the_clock &lt;= true;
    wait;
  end process;

end architecture bench;

-- Configs (unchanged from Doulos)
configuration cfg_seq_detector_tb of seq_detector_tb is
  for bench
    for uut: seq_detector
      -- Default configuration
    end for;
  end for;
end cfg_seq_detector_tb;

configuration cfg_seq_detector_tb_rtl of seq_detector_tb is
  for bench
    for uut: seq_detector
      use entity work.seq_detector(rtl);
    end for;
  end for;
end cfg_seq_detector_tb_rtl;</vhdl>
</project>
