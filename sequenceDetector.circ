<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="4.0.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v4.0.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="type" val="output"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(110,100)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(110,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="x"/>
    </comp>
    <comp lib="0" loc="(460,190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Q"/>
      <a name="type" val="output"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(90,190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="reset"/>
    </comp>
    <comp lib="5" loc="(100,180)" name="LED">
      <a name="facing" val="south"/>
    </comp>
    <comp lib="5" loc="(140,290)" name="LED">
      <a name="facing" val="north"/>
    </comp>
    <comp lib="5" loc="(140,90)" name="LED">
      <a name="facing" val="south"/>
    </comp>
    <comp lib="5" loc="(400,120)" name="LED">
      <a name="facing" val="south"/>
      <a name="label" val="z"/>
    </comp>
    <comp loc="(400,170)" name="seq_detector_moore">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(100,180)" to="(100,190)"/>
    <wire from="(100,190)" to="(180,190)"/>
    <wire from="(110,100)" to="(140,100)"/>
    <wire from="(110,280)" to="(140,280)"/>
    <wire from="(140,100)" to="(140,170)"/>
    <wire from="(140,170)" to="(180,170)"/>
    <wire from="(140,210)" to="(140,280)"/>
    <wire from="(140,210)" to="(180,210)"/>
    <wire from="(140,280)" to="(140,290)"/>
    <wire from="(140,90)" to="(140,100)"/>
    <wire from="(400,120)" to="(400,170)"/>
    <wire from="(400,190)" to="(460,190)"/>
    <wire from="(90,190)" to="(100,190)"/>
  </circuit>
  <vhdl name="seq_detector_moore">library ieee;
use ieee.std_logic_1164.all;

entity seq_detector_moore is
  port (
    clk   : in  std_logic;
    reset : in  std_logic;                   -- synchronous, active-high
    x     : in  std_logic;                   -- serial bit
    z     : out std_logic;                   -- 1-cycle pulse on 001/010/110
    Q     : out std_logic_vector(2 downto 0) -- state to LEDs (debug)
  );
end seq_detector_moore;

architecture rtl of seq_detector_moore is
  type state_t is (START, S0, S1, S00, S01, S10, S11, DETECT);
  signal current_state : state_t := START;
  signal next_state    : state_t := START;
begin
  -- State register (synchronous reset)
  state_reg : process(clk)
  begin
    if rising_edge(clk) then
      if reset = '1' then
        current_state &lt;= START;
      else
        current_state &lt;= next_state;
      end if;
    end if;
  end process;

  -- Next-state logic (combinational)
  next_logic : process(current_state, x)
  begin
    next_state &lt;= current_state;  -- default hold
    case current_state is
      when START =&gt;
        if x='0' then next_state &lt;= S0  else next_state &lt;= S1  end if;

      when S0 =&gt;
        if x='0' then next_state &lt;= S00 else next_state &lt;= S01 end if;

      when S1 =&gt;
        if x='0' then next_state &lt;= S10 else next_state &lt;= S11 end if;

      -- detect 001
      when S00 =&gt;
        if x='1' then next_state &lt;= DETECT else next_state &lt;= S00 end if;

      -- detect 010
      when S01 =&gt;
        if x='0' then next_state &lt;= DETECT else next_state &lt;= S11 end if;

      when S10 =&gt;
        if x='0' then next_state &lt;= S00 else next_state &lt;= S01 end if;

      -- detect 110
      when S11 =&gt;
        if x='0' then next_state &lt;= DETECT else next_state &lt;= S11 end if;

      -- non-overlap: consume and restart
      when DETECT =&gt;
        next_state &lt;= START;
    end case;
  end process;

  -- Moore output (1 exactly in DETECT)
  z &lt;= '1' when current_state = DETECT else '0';

  -- Export a code to LEDs for debugging (arbitrary encoding)
  with current_state select
    Q &lt;= "000" when START,
         "001" when S0,
         "010" when S1,
         "011" when S00,
         "100" when S01,
         "101" when S10,
         "110" when S11,
         "111" when DETECT;
end rtl;
</vhdl>
</project>
